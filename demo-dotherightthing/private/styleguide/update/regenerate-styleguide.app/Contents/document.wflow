<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>339.2</string>
	<key>AMApplicationVersion</key>
	<string>2.2.4</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.1</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionNameComment</key>
				<string>Regenerate styleguide</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>on run {input, parameters}	# description: to allow us to store regenerate-styleguide.app separately from the project assets, we load KSS configuration from a developer-managed XML (.plist) file 	# note: the easiest way to test and edit this script is to use Spotlight to search for AppleScript Editor 		# useful: http://lists.apple.com/archives/applescript-users/2009/Feb/msg00054.html	# useful: http://www.mactech.com/articles/mactech/Vol.22/22.03/StoringandAccessingData/index.html - "Retrieving Properties From a Property List File"	# useful: https://discussions.apple.com/message/20335620#20335620	# useful: http://macscripter.net/viewtopic.php?id=22080 ("plist" file type determined through trial and error..)	# useful: Linux command reference: http://pic.dhe.ibm.com/infocenter/aix/v7r1/index.jsp?topic=%2Fcom.ibm.aix.cmds%2Fdoc%2Faixcmds2%2Fgrep.htm	# useful: https://discussions.apple.com/thread/3162228?start=0&amp;tstart=0 (to Display style guide in browser)	# useful: http://stackoverflow.com/questions/4669851/in-linux-how-to-copy-all-the-files-not-starting-with-a-given-string	# useful: http://stackoverflow.com/questions/1870270/sending-commands-and-strings-to-terminal-app-with-applescript - "in window 1"	# useful: unstableme.blogspot.co.nz/2009/12/use-tab-newline-with-echo-command-bash.html - -e enable interpretation of backslash escapes	# useful: http://unix.stackexchange.com/questions/32018/grep-and-escaping-a-dollar-sign (//$)	# note: this fails on -t flag: do script with command "ls " &amp; kss_template_template_folder &amp; " | grep -v .svn | xargs cp -t " &amp; kss_output_folder &amp; "/template"	# note: DI recommends \.svn but Applescript compiler complains about this	# 1. ls -a = Lists all entries in the directory, including the entries that begin with a . (dot)	# 2. grep -v = Displays all lines not matching the specified pattern	# 3. rm = Removes (unlinks) files or directories.	# 3. -rf = Permits recursive removal of directories, does not prompt before removing a write-protected file	# ls -a *|grep -v .svn|xargs rm -rf	# last updated: Wed 21.11.2012 @ 17.20 by DS	tell application "Finder"		# get path to /myfolder/private/styleguide/update/regenerate-styleguide.app		# THESE VARS COULD BE SET VIA THE PLIST FILE, MAKING THIS MORE PORTABLE TO .BAT FILE		set automator_app_path to path to me		# get path to /myfolder/private/styleguide		set private_styleguide_folder to (container of container of (automator_app_path)) as alias		# get path to /myfolder/private/styleguide/update		set private_styleguide_update_folder to ((POSIX path of (private_styleguide_folder as string)) &amp; "update")		# get path to /myfolder/private/styleguide/template		set private_styleguide_template_folder to ((POSIX path of (private_styleguide_folder as string)) &amp; "template")		# get path to /myfolder/private/styleguide/user		set private_styleguide_user_folder to ((POSIX path of (private_styleguide_folder as string)) &amp; "user")		# get path to structured .plist (XML) config file - 'type' filter ensures that only .plist files can be selected		set config_file_path to choose file with prompt "Locate your .plist config file and click OK" of type "plist" default location private_styleguide_user_folder		set config_file to (POSIX path of (config_file_path as string))		# read variable values out config file		tell application "System Events"			tell property list file config_file				tell contents					set kss_node_folder to value of property list item "docroot_kssnode_path"					set public_styles_folder to value of property list item "project_docroot_styles_path"					set public_styleguide_folder to value of property list item "project_docroot_styleguide_path"					set project_domain to value of property list item "project_domain"					# vars used to generate kss_config.inc.php					set project_php_styleguide_site_name to value of property list item "project_name"					set project_php_styleguide_path to value of property list item "project_webroot_styleguide_path"					set project_php_styleguide_css_path to value of property list item "project_webroot_styles_path"					set project_php_styleguide_section_prefix to value of property list item "project_styleguide_section_prefix"					set project_php_styleguide_munge_breadcrumbs to value of property list item "project_styleguide_rewrite_breadcrumbs"					set project_php_styleguide_munge_title to value of property list item "project_styleguide_rewrite_title"					set project_php_styleguide_viewport_width to value of property list item "project_styleguide_viewport_width"				end tell			end tell		end tell		# this may be redundant as the kss_config aren't 'got' but they come thru anyway..		get {kss_node_folder, public_styles_folder, public_styleguide_folder, project_domain}	end tell	tell application "Terminal"		# activate -- removed as brings window to the front; you can tell whether script is running because a spinning cog appears in the toolbar at the top of the page.			# Set KSS paths		set kss_source_folder to public_styles_folder		set kss_output_folder to public_styleguide_folder		set kss_template_folder to private_styleguide_template_folder		set kss_template_template_folder to (kss_template_folder &amp; "/template")		set kss_template_generated_folder to (kss_template_folder &amp; "/generated")		# Copy styleguide.md from /myfolder/private/template/public -&gt; CSS folder		do script with command "cp " &amp; kss_template_template_folder &amp; "/public/styleguide.md " &amp; kss_source_folder		# Create the 'template' folder if it does not exist already; -p flag ensures that no error is generated if the folder already exists		do script with command "mkdir -p " &amp; kss_output_folder &amp; "/template" in window 1		do script with command "mkdir -p " &amp; kss_output_folder &amp; "/template/public" in window 1		do script with command "mkdir -p " &amp; kss_output_folder &amp; "/generated" in window 1		# generate config string for importer.php		set kss_config_contents to "&lt;?php \\r\\n"		set kss_config_contents to kss_config_contents &amp; "/* Styleguide Generator config file for use by importer.php */\\r\\n"		set kss_config_contents to kss_config_contents &amp; "\\$kss_config = array(\\r\\n"		set kss_config_contents to kss_config_contents &amp; "'project_php_styleguide_site_name' =&gt; '" &amp; project_php_styleguide_site_name &amp; "',\\r\\n"		set kss_config_contents to kss_config_contents &amp; "'project_php_styleguide_path' =&gt; '" &amp; project_php_styleguide_path &amp; "',\\n"		set kss_config_contents to kss_config_contents &amp; "'project_php_styleguide_css_path' =&gt; '" &amp; project_php_styleguide_css_path &amp; "',\\n"		set kss_config_contents to kss_config_contents &amp; "'project_php_styleguide_section_prefix' =&gt; '" &amp; project_php_styleguide_section_prefix &amp; "',\\n"		set kss_config_contents to kss_config_contents &amp; "'project_php_styleguide_munge_breadcrumbs' =&gt; '" &amp; project_php_styleguide_munge_breadcrumbs &amp; "',\\n"		set kss_config_contents to kss_config_contents &amp; "'project_php_styleguide_munge_title' =&gt; '" &amp; project_php_styleguide_munge_title &amp; "',\\n"		set kss_config_contents to kss_config_contents &amp; "'project_php_styleguide_viewport_width' =&gt; '" &amp; project_php_styleguide_viewport_width &amp; "'\\n"		set kss_config_contents to kss_config_contents &amp; ");\\n"		set kss_config_contents to kss_config_contents &amp; "?&gt;"		# output string to file		do script with command "echo -e \"" &amp; kss_config_contents &amp; "\" &gt; " &amp; kss_output_folder &amp; "/template/importer_config.inc.php" in window 1		# Copy CONTENTS of populated 'template' folder over (incl nested 'public' folder), EXCEPT (github) .svn files, no need to remove what's there first				# note: cp -R not used with first command, as this copies .svn files in nested /public directory		do script with command "cp " &amp; kss_template_template_folder &amp; "/!(.svn) " &amp; kss_output_folder &amp; "/template" in window 1		do script with command "cp " &amp; kss_template_template_folder &amp; "/public/!(.svn) " &amp; kss_output_folder &amp; "/template/public" in window 1		# Remove any existing generated .html (KSS documentation) files		do script with command "rm -f " &amp; kss_output_folder &amp; "/generated/*.html" in window 1		# Start KSS node		do script with command "cd " &amp; kss_node_folder &amp; "; kss-node index.js" in window 1		# set the target path for the generated style guide HTML, I think I set this here as the path may not exist earlier		# kss-node has been edited to prevent public/.svn folder being copied over to the output folder here		set kss_output_source_folder to (kss_output_folder &amp; "/generated")		# Regenerate the style guide			do script with command "kss-node " &amp; kss_source_folder &amp; " " &amp; kss_output_source_folder &amp; " --template " &amp; kss_template_template_folder in window 1	end tell	display dialog "Styleguide regeneration complete" buttons {"Close", "Display styleguide"} default button "Close"	if the button returned of the result is "Display styleguide" then		open location project_domain &amp; project_php_styleguide_path		tell application "Terminal"			delay 2			close every window			quit		end tell	else		tell application "Terminal"			delay 2			close every window			quit		end tell	end ifend run</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.1</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>352A3397-5C1B-4BC4-B7A9-7422434B431B</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>9ABEDD25-7E43-44EE-8A63-20A21E93F146</string>
				<key>UUID</key>
				<string>934CD3E0-DD23-4520-AE5F-22C5BF9A124C</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>953.000000:1018.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/English.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>variables</key>
	<array>
		<dict>
			<key>UUID</key>
			<string>1622AB03-1415-4EAC-95FF-688C68AA6AFF</string>
			<key>identifier</key>
			<string>com.apple.Automator.Variable.Path</string>
			<key>name</key>
			<string>Path</string>
			<key>value</key>
			<string>~/Desktop</string>
		</dict>
		<dict>
			<key>UUID</key>
			<string>6F2636A9-0263-4DB5-95B0-D69BB44A6335</string>
			<key>identifier</key>
			<string>com.apple.Automator.Variable.Storage</string>
			<key>name</key>
			<string>Storage</string>
		</dict>
		<dict>
			<key>UUID</key>
			<string>6E5440ED-8D13-4365-8E12-8C95FAE7395F</string>
			<key>identifier</key>
			<string>com.apple.Automator.Variable.Path</string>
			<key>name</key>
			<string>Path 1</string>
			<key>value</key>
			<string>~/Desktop</string>
		</dict>
		<dict>
			<key>UUID</key>
			<string>D53E8975-0A1B-47F9-8E5B-F0C51E7E78D9</string>
			<key>identifier</key>
			<string>com.apple.Automator.Variable.Path</string>
			<key>name</key>
			<string>Path 2</string>
			<key>value</key>
			<string>~/Desktop</string>
		</dict>
	</array>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
